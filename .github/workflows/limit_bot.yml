# to be honest, i'm not even sure this works. co-wrote this with claude to learn
# a bit about github actions and shell scripting, and it seems to work fine when
# "simulated" locally, but i have limited faith
name: Enforce Bot Path Restrictions
on:
  push:
    branches: [ main ]

env:
  ALLOWED_PATH: ${{ vars.BOT_ALLOWED_PATH || 'src/bot_gen/' }}
  BOT_EMAIL: ${{ vars.BOT_EMAIL || 'thoughts_bot@marzolo.com' }}
  SECURITY_BOT_EMAIL: ${{ vars.SECURITY_BOT_EMAIL || 'security-bot@example.com' }}

jobs:
  verify-path-restrictions:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Get full history for proper analysis
        token: ${{ secrets.GITHUB_TOKEN }} # Ensure token is passed for push access

    - name: Verify bot changes stay within allowed path
      id: verify
      run: |
        # Get all commits in this push
        COMMITS=$(git rev-list --reverse ${{ github.event.before }}..${{ github.event.after }})

        # Create a violations tracking file
        rm -f violations.txt

        # Process each commit individually
        for COMMIT in $COMMITS; do
          AUTHOR_EMAIL=$(git log -1 --format='%ae' $COMMIT)
          
          # Skip security bot's own commits
          if [[ "$AUTHOR_EMAIL" == "$SECURITY_BOT_EMAIL" ]]; then
            echo "Skipping check for security bot's commit: $COMMIT"
            continue
          fi
          
          # Only check bot commits
          if [[ "$AUTHOR_EMAIL" == "$BOT_EMAIL" ]]; then
            echo "Checking bot commit: $COMMIT"
            
            # Get detailed changes for this commit
            git diff-tree --no-commit-id -r --name-status $COMMIT > commit_changes.txt
            
            VIOLATIONS=0
            VIOLATION_DETAILS=""
            
            while IFS= read -r line; do
              # Split line into status and files
              read -r STATUS FILE1 FILE2 <<< "$line"
              
              case $STATUS in
                R*) # Renamed/moved file
                  if [[ "$FILE1" =~ ^$ALLOWED_PATH && ! "$FILE2" =~ ^$ALLOWED_PATH ]]; then
                    echo "‚ùå VIOLATION: Bot attempted to move '$FILE1' to '$FILE2' outside allowed path!"
                    VIOLATIONS=$((VIOLATIONS+1))
                    VIOLATION_DETAILS+="- Moved: $FILE1 -> $FILE2"$'\n'
                  fi
                  ;;
                A|M|D) # Added, Modified, or Deleted files
                  FILE=$FILE1
                  if [[ ! "$FILE" =~ ^$ALLOWED_PATH ]]; then
                    echo "‚ùå VIOLATION in commit $COMMIT: '$FILE' outside allowed path!"
                    VIOLATIONS=$((VIOLATIONS+1))
                    VIOLATION_DETAILS+="- ${STATUS}: $FILE"$'\n'
                  else
                    echo "‚úÖ Allowed: $FILE"
                  fi
                  ;;
                *) # Other changes
                  echo "‚ö†Ô∏è Unknown change type $STATUS for file: $FILE1"
                  ;;
              esac
            done < commit_changes.txt
            
            # If violations found, store details for this commit
            if [ $VIOLATIONS -gt 0 ]; then
              COMMIT_MSG=$(git log -1 --format='%s' $COMMIT)
              echo "$COMMIT:$AUTHOR_EMAIL:$VIOLATIONS:$COMMIT_MSG"$'\n'"$VIOLATION_DETAILS" >> violations.txt
              echo "Found $VIOLATIONS violations in commit $COMMIT"
            fi
          else
            echo "Not a bot commit ($AUTHOR_EMAIL), skipping verification of $COMMIT"
          fi
        done

        if [ -f violations.txt ]; then
          echo "unauthorized=true" >> $GITHUB_OUTPUT
          echo "Violations found! Check violations.txt for details"
          cat violations.txt
          exit 1
        else
          echo "No violations found in any commits"
        fi
      # if [ -f violations.txt ]; then
      #   echo "unauthorized=true" >> $GITHUB_OUTPUT
      #   echo "Violations found! Check violations.txt for details"
      #   cat violations.txt
      #   # Don't exit here, let the next steps handle it
      #   # Instead, set the step status
      #   echo "status=failure" >> $GITHUB_OUTPUT
      # else
      #   echo "No violations found in any commits"
      #   echo "status=success" >> $GITHUB_OUTPUT
      # fi

    - name: Revert unauthorized changes
      if: failure() && steps.verify.outputs.unauthorized == 'true'
      run: |
        echo "Reverting unauthorized changes..."
        git config --global user.name "Security Bot"
        git config --global user.email "$SECURITY_BOT_EMAIL"

        # Process each violating commit
        REVERT_MSG=$'üö® Reverted unauthorized bot changes\n\nThe following commits contained violations:\n'

        while IFS= read -r line; do
          # Skip empty lines
          [ -z "$line" ] && continue
          
          # Extract commit hash (first field before :)
          COMMIT=$(echo "$line" | cut -d: -f1)
          
          echo "Reverting violating commit: $COMMIT"
          git revert --no-commit $COMMIT
          
          # Add commit info to revert message
          REVERT_MSG+="- $line\n"
        done < violations.txt

        # Create single revert commit with all changes
        git commit -m "$REVERT_MSG"
        if ! git push origin HEAD:main; then
          echo "Failed to push revert commit. Manual intervention required."
          exit 1
        fi

    - name: Send violation notification
      if: failure() && steps.verify.outputs.unauthorized == 'true'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.ISSUE_TOKEN || secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const violations = fs.readFileSync('violations.txt', 'utf8')
            .split('\n\n')  // Split commits by double newline
            .filter(Boolean)
            .map(block => {
              const [header, ...details] = block.split('\n');
              const [commit, author, count, msg] = header.split(':');
              return `## Commit ${commit.substring(0,7)}\n` +
                     `- Author: ${author}\n` +
                     `- Message: ${msg}\n` +
                     `- Violations: ${count}\n` +
                     `- Details:\n` +
                     details.map(d => `  ${d}`).join('\n');
            })
            .join('\n\n');

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'üö® Bot Path Violations Detected',
            body: `Unauthorized changes were detected and reverted.

            ${violations}
            
            See workflow run: ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`
          });
